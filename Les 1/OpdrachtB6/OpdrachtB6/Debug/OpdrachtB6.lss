
OpdrachtB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091c  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000843  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045f  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00001ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1b d0       	rcall	.+54     	; 0xd0 <main>
  9a:	31 c0       	rjmp	.+98     	; 0xfe <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <variableDelay>:
	return 0;
}

void variableDelay(int delay)
{
	if(delay == 250){
  9e:	8a 3f       	cpi	r24, 0xFA	; 250
  a0:	91 05       	cpc	r25, r1
  a2:	49 f4       	brne	.+18     	; 0xb6 <variableDelay+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e7       	ldi	r18, 0x7F	; 127
  a6:	3a e1       	ldi	r19, 0x1A	; 26
  a8:	46 e0       	ldi	r20, 0x06	; 6
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <variableDelay+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <variableDelay+0x16>
  b4:	00 00       	nop
		_delay_ms(250);
	}
	if(delay == 1000){
  b6:	88 3e       	cpi	r24, 0xE8	; 232
  b8:	93 40       	sbci	r25, 0x03	; 3
  ba:	49 f4       	brne	.+18     	; 0xce <variableDelay+0x30>
  bc:	3f ef       	ldi	r19, 0xFF	; 255
  be:	49 e6       	ldi	r20, 0x69	; 105
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	31 50       	subi	r19, 0x01	; 1
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <variableDelay+0x24>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <variableDelay+0x2e>
  cc:	00 00       	nop
  ce:	08 95       	ret

000000d0 <main>:
int main(void)
{
	int flipmask = 0b00000001;
	int delay= 1000;

	DDRD = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111110;
  d4:	8e ef       	ldi	r24, 0xFE	; 254
  d6:	84 bb       	out	0x14, r24	; 20
void variableDelay(int delay);

int main(void)
{
	int flipmask = 0b00000001;
	int delay= 1000;
  d8:	c8 ee       	ldi	r28, 0xE8	; 232
  da:	d3 e0       	ldi	r29, 0x03	; 3
	DDRD = 0xFF;
	DDRC = 0b11111110;
	while (1)
	{
		
		if (PINC & 0b00000001)
  dc:	98 9b       	sbis	0x13, 0	; 19
  de:	08 c0       	rjmp	.+16     	; 0xf0 <main+0x20>
		{
			if (delay == 1000)
  e0:	c8 3e       	cpi	r28, 0xE8	; 232
  e2:	d3 40       	sbci	r29, 0x03	; 3
  e4:	19 f4       	brne	.+6      	; 0xec <main+0x1c>
			{
				delay = 250;
  e6:	ca ef       	ldi	r28, 0xFA	; 250
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x20>
			}
			else
			{
				delay = 1000;
  ec:	c8 ee       	ldi	r28, 0xE8	; 232
  ee:	d3 e0       	ldi	r29, 0x03	; 3
			}
		}
		PORTD ^= flipmask;
  f0:	92 b3       	in	r25, 0x12	; 18
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 27       	eor	r24, r25
  f6:	82 bb       	out	0x12, r24	; 18
		variableDelay(delay);
  f8:	ce 01       	movw	r24, r28
  fa:	d1 df       	rcall	.-94     	; 0x9e <variableDelay>
	}
  fc:	ef cf       	rjmp	.-34     	; 0xdc <main+0xc>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
