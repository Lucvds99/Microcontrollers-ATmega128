
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010a  0080010a  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c19  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000978  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000556  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ec  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	c0 c0       	rjmp	.+384    	; 0x186 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	93 c0       	rjmp	.+294    	; 0x158 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d2 d0       	rcall	.+420    	; 0x268 <main>
  c4:	d9 c0       	rjmp	.+434    	; 0x278 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
	lcd_write_cmd(0x01);
}

void lcd_set_cursor(int position)
{
	lcd_write_cmd(0x80 + position);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_strobe_lcd_e+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_strobe_lcd_e+0x10>
  d8:	00 00       	nop
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 bb       	out	0x15, r24	; 21
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_strobe_lcd_e+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_strobe_lcd_e+0x22>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <lcd_write_cmd>:
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_strobe_lcd_e>
  f8:	c2 95       	swap	r28
  fa:	c0 7f       	andi	r28, 0xF0	; 240
  fc:	c5 bb       	out	0x15, r28	; 21
  fe:	e4 df       	rcall	.-56     	; 0xc8 <lcd_strobe_lcd_e>
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_init>:
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
 108:	15 ba       	out	0x15, r1	; 21
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	dc df       	rcall	.-72     	; 0xc8 <lcd_strobe_lcd_e>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	ed df       	rcall	.-38     	; 0xee <lcd_write_cmd>
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	eb df       	rcall	.-42     	; 0xee <lcd_write_cmd>
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	e9 cf       	rjmp	.-46     	; 0xee <lcd_write_cmd>
 11c:	08 95       	ret

0000011e <lcd_write_data>:

	// Second nibble
	PORTC = (byte<<4);
	lcd_strobe_lcd_e();
}
void lcd_write_data(unsigned char byte) {
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte & 0xf0;
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 126:	85 b3       	in	r24, 0x15	; 21
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 12c:	cd df       	rcall	.-102    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 12e:	c2 95       	swap	r28
 130:	c0 7f       	andi	r28, 0xF0	; 240
 132:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 134:	85 b3       	in	r24, 0x15	; 21
 136:	84 60       	ori	r24, 0x04	; 4
	lcd_strobe_lcd_e();
 138:	85 bb       	out	0x15, r24	; 21
 13a:	c6 df       	rcall	.-116    	; 0xc8 <lcd_strobe_lcd_e>
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_display_text>:
	// Set cursor
	lcd_write_cmd(0x0F);
}

void lcd_display_text(char *str)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	for(;*str; str++){
 146:	02 c0       	rjmp	.+4      	; 0x14c <lcd_display_text+0xc>
		lcd_write_data(*str);
 148:	ea df       	rcall	.-44     	; 0x11e <lcd_write_data>
	lcd_write_cmd(0x0F);
}

void lcd_display_text(char *str)
{
	for(;*str; str++){
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	88 81       	ld	r24, Y
 14e:	81 11       	cpse	r24, r1
 150:	fb cf       	rjmp	.-10     	; 0x148 <lcd_display_text+0x8>
		lcd_write_data(*str);
	}
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <__vector_12>:
		default: return '?';     // Onbekende code
	}
}

// Timer interrupt service routine
ISR(TIMER1_COMPA_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	timer_ticks++;
 166:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_ticks>
 16a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer_ticks+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer_ticks+0x1>
 174:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_ticks>
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_1>:

// Externe interrupt service routine voor knop
ISR(INT0_vect) {
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
	if (bit_is_clear(PIND, PD2)) {
 198:	82 99       	sbic	0x10, 2	; 16
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <__vector_1+0x28>
		// Knop is ingedrukt
		button_down_ticks = timer_ticks;
 19c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_ticks>
 1a0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer_ticks+0x1>
 1a4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <button_down_ticks+0x1>
 1a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <button_down_ticks>
 1ac:	50 c0       	rjmp	.+160    	; 0x24e <__vector_1+0xc8>
		} else {
		// Knop is losgelaten
		uint16_t duration = timer_ticks - button_down_ticks;
 1ae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_ticks>
 1b2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer_ticks+0x1>
 1b6:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <button_down_ticks>
 1ba:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <button_down_ticks+0x1>
 1be:	82 1b       	sub	r24, r18
 1c0:	93 0b       	sbc	r25, r19
		
		if (duration >= 7000) { // 7 seconden
 1c2:	88 35       	cpi	r24, 0x58	; 88
 1c4:	2b e1       	ldi	r18, 0x1B	; 27
 1c6:	92 07       	cpc	r25, r18
 1c8:	40 f0       	brcs	.+16     	; 0x1da <__vector_1+0x54>
			// Leeg morsebuffer, dit geeft een nieuw woord aan
			morse_buffer = 0;
 1ca:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <morse_buffer>
			morse_length = 0;
 1ce:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <morse_length>
			word_flag = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1d8:	3a c0       	rjmp	.+116    	; 0x24e <__vector_1+0xc8>
			} else if (duration >= 3000) { // 3 seconden
 1da:	88 3b       	cpi	r24, 0xB8	; 184
 1dc:	2b e0       	ldi	r18, 0x0B	; 11
 1de:	92 07       	cpc	r25, r18
 1e0:	78 f0       	brcs	.+30     	; 0x200 <__vector_1+0x7a>
			// Voeg spaties toe aan morsebuffer om nieuwe letter aan te geven
			if (morse_length > 0) {
 1e2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <morse_length>
 1e6:	88 23       	and	r24, r24
 1e8:	91 f1       	breq	.+100    	; 0x24e <__vector_1+0xc8>
				morse_buffer <<= 1;
 1ea:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <morse_buffer>
 1ee:	88 0f       	add	r24, r24
 1f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <morse_buffer>
				morse_length++;
 1f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <morse_length>
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <morse_length>
 1fe:	27 c0       	rjmp	.+78     	; 0x24e <__vector_1+0xc8>
			}
			} else if (duration >= 1000) { // 1 seconde
 200:	88 3e       	cpi	r24, 0xE8	; 232
 202:	93 40       	sbci	r25, 0x03	; 3
 204:	80 f0       	brcs	.+32     	; 0x226 <__vector_1+0xa0>
			// Voeg punt toe aan morsebuffer
			morse_buffer <<= 1;
 206:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <morse_buffer>
 20a:	88 0f       	add	r24, r24
 20c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <morse_buffer>
			morse_buffer |= 1;
 210:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <morse_buffer>
 214:	81 60       	ori	r24, 0x01	; 1
 216:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <morse_buffer>
			morse_length++;
 21a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <morse_length>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <morse_length>
 224:	14 c0       	rjmp	.+40     	; 0x24e <__vector_1+0xc8>
			} else { // Korter dan 1 seconde
			// Voeg streepje toe aan morsebuffer
			morse_buffer <<= 1;
 226:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <morse_buffer>
 22a:	88 0f       	add	r24, r24
 22c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <morse_buffer>
			morse_buffer |= 1;
 230:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <morse_buffer>
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <morse_buffer>
			morse_buffer <<= 1; // Add extra 0 for encoding "-"
 23a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <morse_buffer>
 23e:	88 0f       	add	r24, r24
 240:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <morse_buffer>
			morse_length++;
 244:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <morse_length>
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <morse_length>
		}
	}
	button_down_ticks = 0;
 24e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <button_down_ticks+0x1>
 252:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <button_down_ticks>
}
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <main>:

int main(void) {
	lcd_init();
 268:	4d df       	rcall	.-358    	; 0x104 <lcd_init>
	lcd_display_text("hallo ");
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	68 df       	rcall	.-304    	; 0x140 <lcd_display_text>
	
	
	while(1){
		lcd_display_text("hallo ");
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	65 df       	rcall	.-310    	; 0x140 <lcd_display_text>
 276:	fc cf       	rjmp	.-8      	; 0x270 <main+0x8>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
