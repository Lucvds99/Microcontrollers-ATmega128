
EindOpdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800186  00800186  00000980  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3a  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4d  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000688  00000000  00000000  0000233f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000420  00000000  00000000  000030ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000034cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	de c0       	rjmp	.+444    	; 0x1c2 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e6       	ldi	r30, 0x66	; 102
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 38       	cpi	r26, 0x86	; 134
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e8       	ldi	r26, 0x86	; 134
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 39       	cpi	r26, 0x90	; 144
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bb d0       	rcall	.+374    	; 0x23a <main>
  c4:	ce c3       	rjmp	.+1948   	; 0x862 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
	lcd_write_cmd(0x01);
}

void lcd_set_cursor(int position)
{
	lcd_write_cmd(0x80 + position);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_strobe_lcd_e+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_strobe_lcd_e+0x10>
  d8:	00 00       	nop
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 bb       	out	0x15, r24	; 21
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_strobe_lcd_e+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_strobe_lcd_e+0x22>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <lcd_write_cmd>:
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	e8 df       	rcall	.-48     	; 0xc8 <lcd_strobe_lcd_e>
  f8:	c2 95       	swap	r28
  fa:	c0 7f       	andi	r28, 0xF0	; 240
  fc:	c5 bb       	out	0x15, r28	; 21
  fe:	e4 df       	rcall	.-56     	; 0xc8 <lcd_strobe_lcd_e>
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <lcd_init>:
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 bb       	out	0x14, r24	; 20
 108:	15 ba       	out	0x15, r1	; 21
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	dc df       	rcall	.-72     	; 0xc8 <lcd_strobe_lcd_e>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	ed df       	rcall	.-38     	; 0xee <lcd_write_cmd>
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	eb df       	rcall	.-42     	; 0xee <lcd_write_cmd>
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	e9 cf       	rjmp	.-46     	; 0xee <lcd_write_cmd>
 11c:	08 95       	ret

0000011e <lcd_clear_display>:
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	e6 cf       	rjmp	.-52     	; 0xee <lcd_write_cmd>
 122:	08 95       	ret

00000124 <lcd_write_data>:

	// Second nibble
	PORTC = (byte<<4);
	lcd_strobe_lcd_e();
}
void lcd_write_data(unsigned char byte) {
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte & 0xf0;
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 132:	ca df       	rcall	.-108    	; 0xc8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 134:	c2 95       	swap	r28
 136:	c0 7f       	andi	r28, 0xF0	; 240
 138:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	84 60       	ori	r24, 0x04	; 4
	lcd_strobe_lcd_e();
 13e:	85 bb       	out	0x15, r24	; 21
 140:	c3 df       	rcall	.-122    	; 0xc8 <lcd_strobe_lcd_e>
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <lcd_display_text>:
	// Set cursor
	lcd_write_cmd(0x0F);
}

void lcd_display_text(char *str)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	for(;*str; str++){
 14c:	02 c0       	rjmp	.+4      	; 0x152 <lcd_display_text+0xc>
		lcd_write_data(*str);
 14e:	ea df       	rcall	.-44     	; 0x124 <lcd_write_data>
	lcd_write_cmd(0x0F);
}

void lcd_display_text(char *str)
{
	for(;*str; str++){
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	88 81       	ld	r24, Y
 154:	81 11       	cpse	r24, r1
 156:	fb cf       	rjmp	.-10     	; 0x14e <lcd_display_text+0x8>
		lcd_write_data(*str);
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <morseByteToChar>:
}

// Function to convert a Morse code byte representation to its corresponding character
char *morseByteToChar(char morseByte, MorseMapping morseMap[]) {
	// Iterate through the Morse mapping array to find the corresponding character
	for (int i = 0; i < 26; i++) {
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	0f c0       	rjmp	.+30     	; 0x182 <morseByteToChar+0x24>
		if (morseMap[i].morseByte == morseByte) {
 164:	f9 01       	movw	r30, r18
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e2 0f       	add	r30, r18
 16c:	f3 1f       	adc	r31, r19
 16e:	e6 0f       	add	r30, r22
 170:	f7 1f       	adc	r31, r23
 172:	90 81       	ld	r25, Z
 174:	98 13       	cpse	r25, r24
 176:	03 c0       	rjmp	.+6      	; 0x17e <morseByteToChar+0x20>
			return morseMap[i].character;
 178:	81 81       	ldd	r24, Z+1	; 0x01
 17a:	92 81       	ldd	r25, Z+2	; 0x02
 17c:	08 95       	ret
}

// Function to convert a Morse code byte representation to its corresponding character
char *morseByteToChar(char morseByte, MorseMapping morseMap[]) {
	// Iterate through the Morse mapping array to find the corresponding character
	for (int i = 0; i < 26; i++) {
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	2a 31       	cpi	r18, 0x1A	; 26
 184:	31 05       	cpc	r19, r1
 186:	74 f3       	brlt	.-36     	; 0x164 <morseByteToChar+0x6>
		if (morseMap[i].morseByte == morseByte) {
			return morseMap[i].character;
		}
	}
	return '\0'; // Return null character if Morse byte not found (not in Morse mapping)
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
}
 18c:	08 95       	ret

0000018e <generateByteFromTime>:

char *generateByteFromTime(int time, char *buffer) {
		// Als de tijd kleiner is dan 3 (uur of minuut)
		if (time < 2) {
 18e:	02 97       	sbiw	r24, 0x02	; 2
 190:	54 f4       	brge	.+20     	; 0x1a6 <generateByteFromTime+0x18>
			*buffer = (*buffer << 2) | 0b01; // Shift eerst de buffer byte naar links en voeg vervolgens 01 toe
 192:	fb 01       	movw	r30, r22
 194:	80 81       	ld	r24, Z
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	80 83       	st	Z, r24
 1a4:	09 c0       	rjmp	.+18     	; 0x1b8 <generateByteFromTime+0x2a>
			//*buffer = '.';
			} else {
			*buffer = (*buffer << 2) | 0b11; // Shift eerst de buffer byte naar links en voeg vervolgens 11 toe
 1a6:	fb 01       	movw	r30, r22
 1a8:	80 81       	ld	r24, Z
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	83 60       	ori	r24, 0x03	; 3
 1b6:	80 83       	st	Z, r24
			//*buffer = '-';
		}
		return (char *)buffer;
	}
 1b8:	cb 01       	movw	r24, r22
 1ba:	08 95       	ret

000001bc <resetBuffer>:
void resetBuffer(char *buffer) {
	*buffer = 0b00000000; // Set the buffer byte to 0b00000000
 1bc:	fc 01       	movw	r30, r24
 1be:	10 82       	st	Z, r1
 1c0:	08 95       	ret

000001c2 <__vector_1>:
}

ISR(INT0_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	TCNT1 = 0;
 1e8:	1d bc       	out	0x2d, r1	; 45
 1ea:	1c bc       	out	0x2c, r1	; 44
	READING_INPUT = (PIND & 1);
 1ec:	80 b3       	in	r24, 0x10	; 16
 1ee:	81 70       	andi	r24, 0x01	; 1
 1f0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
	if(READING_INPUT == 0 )
 1f4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
 1f8:	81 11       	cpse	r24, r1
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <__vector_1+0x4a>
	{
		//get morse value and use morse map to determine Letter
		generateByteFromTime(morse_units, &buffer);
 1fc:	69 e8       	ldi	r22, 0x89	; 137
 1fe:	71 e0       	ldi	r23, 0x01	; 1
 200:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <morse_units>
 204:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <morse_units+0x1>
 208:	c2 df       	rcall	.-124    	; 0x18e <generateByteFromTime>
		PORTB = 0 ; // Turn the LED off
 20a:	18 ba       	out	0x18, r1	; 24
	}
	morse_units = 0;
 20c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <morse_units+0x1>
 210:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <morse_units>
	
	
	//TIFR = (1 << OCF1A ) ; // clear the CTC flag ( writing a logic one to the set flag clears it)
	
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0b be       	out	0x3b, r0	; 59
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <main>:

int main(void)
{
	DDRB = 0xFF ; // Set LED as output
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	87 bb       	out	0x17, r24	; 23
	TCCR1B |= (1 << WGM12 ); // Configure timer 1 for CTC mode
 23e:	8e b5       	in	r24, 0x2e	; 46
 240:	88 60       	ori	r24, 0x08	; 8
 242:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (TIMER_COMP_VALUE); // Set CTC compare value to 1Hz at 1 MHz AVR clock , with a prescaler of 64
 244:	83 e1       	ldi	r24, 0x13	; 19
 246:	93 e1       	ldi	r25, 0x13	; 19
 248:	9b bd       	out	0x2b, r25	; 43
 24a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10 ) | (0 << CS11 )) | (1 << CS12) ; // Start timer at Fcpu /1024
 24c:	8e b5       	in	r24, 0x2e	; 46
 24e:	85 60       	ori	r24, 0x05	; 5
 250:	8e bd       	out	0x2e, r24	; 46
	
	// Initialiseer knop
	EICRA |= (1 << ISC00);      // Externe interrupt trigger op any digital change
 252:	ea e6       	ldi	r30, 0x6A	; 106
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);       // Activeer externe interrupt 0
 25c:	89 b7       	in	r24, 0x39	; 57
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	89 bf       	out	0x39, r24	; 57
	sei();
 262:	78 94       	sei
	
	
	
	
	lcd_init();
 264:	4f df       	rcall	.-354    	; 0x104 <lcd_init>
	lcd_clear_display();
 266:	5b df       	rcall	.-330    	; 0x11e <lcd_clear_display>
 268:	06 b6       	in	r0, 0x36	; 54
	for (;;)
	{
		if ( TIFR & (1 << OCF1A ))
 26a:	04 fe       	sbrs	r0, 4
 26c:	fd cf       	rjmp	.-6      	; 0x268 <main+0x2e>
 26e:	80 e1       	ldi	r24, 0x10	; 16
		{
			
			TIFR = (1 << OCF1A ) ; // clear the CTC flag ( writing a logic one to the set flag clears it)
 270:	86 bf       	out	0x36, r24	; 54
 272:	8e e4       	ldi	r24, 0x4E	; 78
			printf("hey");
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	9f 93       	push	r25
 278:	8f 93       	push	r24
 27a:	33 d0       	rcall	.+102    	; 0x2e2 <printf>
 27c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
			if (READING_INPUT)
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	88 23       	and	r24, r24
 286:	69 f0       	breq	.+26     	; 0x2a2 <main+0x68>
 288:	28 b3       	in	r18, 0x18	; 24
			{
				
				PORTB |= (1 << morse_units) ; // Toggle the LED
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	00 90 87 01 	lds	r0, 0x0187	; 0x800187 <morse_units>
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x5e>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <main+0x5a>
 29c:	82 2b       	or	r24, r18
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	16 c0       	rjmp	.+44     	; 0x2ce <main+0x94>
 2a2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <morse_units>
				
			}else
			{
				if(morse_units == 12)
 2a6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <morse_units+0x1>
 2aa:	8c 30       	cpi	r24, 0x0C	; 12
 2ac:	91 05       	cpc	r25, r1
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <main+0x7e>
				{
					lcd_display_text(" ");
 2b0:	82 e5       	ldi	r24, 0x52	; 82
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	48 df       	rcall	.-368    	; 0x146 <lcd_display_text>
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <main+0x94>
 2b8:	06 97       	sbiw	r24, 0x06	; 6
				
				}else if (morse_units == 6)
 2ba:	49 f4       	brne	.+18     	; 0x2ce <main+0x94>
 2bc:	60 e0       	ldi	r22, 0x00	; 0
				{
					lcd_display_text(morseByteToChar(buffer, morseMap));
 2be:	71 e0       	ldi	r23, 0x01	; 1
 2c0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <buffer>
 2c4:	4c df       	rcall	.-360    	; 0x15e <morseByteToChar>
 2c6:	3f df       	rcall	.-386    	; 0x146 <lcd_display_text>
					resetBuffer(&buffer);
 2c8:	89 e8       	ldi	r24, 0x89	; 137
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	77 df       	rcall	.-274    	; 0x1bc <resetBuffer>
 2ce:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <morse_units>
				
				}
			}
		morse_units ++;				
 2d2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <morse_units+0x1>
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <morse_units+0x1>
 2dc:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <morse_units>
 2e0:	c3 cf       	rjmp	.-122    	; 0x268 <main+0x2e>

000002e2 <printf>:
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	ae 01       	movw	r20, r28
 2ec:	4b 5f       	subi	r20, 0xFB	; 251
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	fa 01       	movw	r30, r20
 2f2:	61 91       	ld	r22, Z+
 2f4:	71 91       	ld	r23, Z+
 2f6:	af 01       	movw	r20, r30
 2f8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__iob+0x2>
 2fc:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__iob+0x3>
 300:	03 d0       	rcall	.+6      	; 0x308 <vfprintf>
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <vfprintf>:
 308:	2f 92       	push	r2
 30a:	3f 92       	push	r3
 30c:	4f 92       	push	r4
 30e:	5f 92       	push	r5
 310:	6f 92       	push	r6
 312:	7f 92       	push	r7
 314:	8f 92       	push	r8
 316:	9f 92       	push	r9
 318:	af 92       	push	r10
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	2b 97       	sbiw	r28, 0x0b	; 11
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	6c 01       	movw	r12, r24
 33e:	7b 01       	movw	r14, r22
 340:	8a 01       	movw	r16, r20
 342:	fc 01       	movw	r30, r24
 344:	17 82       	std	Z+7, r1	; 0x07
 346:	16 82       	std	Z+6, r1	; 0x06
 348:	83 81       	ldd	r24, Z+3	; 0x03
 34a:	81 ff       	sbrs	r24, 1
 34c:	bf c1       	rjmp	.+894    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	3c 01       	movw	r6, r24
 354:	f6 01       	movw	r30, r12
 356:	93 81       	ldd	r25, Z+3	; 0x03
 358:	f7 01       	movw	r30, r14
 35a:	93 fd       	sbrc	r25, 3
 35c:	85 91       	lpm	r24, Z+
 35e:	93 ff       	sbrs	r25, 3
 360:	81 91       	ld	r24, Z+
 362:	7f 01       	movw	r14, r30
 364:	88 23       	and	r24, r24
 366:	09 f4       	brne	.+2      	; 0x36a <vfprintf+0x62>
 368:	ad c1       	rjmp	.+858    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 36a:	85 32       	cpi	r24, 0x25	; 37
 36c:	39 f4       	brne	.+14     	; 0x37c <vfprintf+0x74>
 36e:	93 fd       	sbrc	r25, 3
 370:	85 91       	lpm	r24, Z+
 372:	93 ff       	sbrs	r25, 3
 374:	81 91       	ld	r24, Z+
 376:	7f 01       	movw	r14, r30
 378:	85 32       	cpi	r24, 0x25	; 37
 37a:	21 f4       	brne	.+8      	; 0x384 <vfprintf+0x7c>
 37c:	b6 01       	movw	r22, r12
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	d6 d1       	rcall	.+940    	; 0x72e <fputc>
 382:	e8 cf       	rjmp	.-48     	; 0x354 <vfprintf+0x4c>
 384:	91 2c       	mov	r9, r1
 386:	21 2c       	mov	r2, r1
 388:	31 2c       	mov	r3, r1
 38a:	ff e1       	ldi	r31, 0x1F	; 31
 38c:	f3 15       	cp	r31, r3
 38e:	d8 f0       	brcs	.+54     	; 0x3c6 <vfprintf+0xbe>
 390:	8b 32       	cpi	r24, 0x2B	; 43
 392:	79 f0       	breq	.+30     	; 0x3b2 <vfprintf+0xaa>
 394:	38 f4       	brcc	.+14     	; 0x3a4 <vfprintf+0x9c>
 396:	80 32       	cpi	r24, 0x20	; 32
 398:	79 f0       	breq	.+30     	; 0x3b8 <vfprintf+0xb0>
 39a:	83 32       	cpi	r24, 0x23	; 35
 39c:	a1 f4       	brne	.+40     	; 0x3c6 <vfprintf+0xbe>
 39e:	23 2d       	mov	r18, r3
 3a0:	20 61       	ori	r18, 0x10	; 16
 3a2:	1d c0       	rjmp	.+58     	; 0x3de <vfprintf+0xd6>
 3a4:	8d 32       	cpi	r24, 0x2D	; 45
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <vfprintf+0xb8>
 3a8:	80 33       	cpi	r24, 0x30	; 48
 3aa:	69 f4       	brne	.+26     	; 0x3c6 <vfprintf+0xbe>
 3ac:	23 2d       	mov	r18, r3
 3ae:	21 60       	ori	r18, 0x01	; 1
 3b0:	16 c0       	rjmp	.+44     	; 0x3de <vfprintf+0xd6>
 3b2:	83 2d       	mov	r24, r3
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	38 2e       	mov	r3, r24
 3b8:	e3 2d       	mov	r30, r3
 3ba:	e4 60       	ori	r30, 0x04	; 4
 3bc:	3e 2e       	mov	r3, r30
 3be:	2a c0       	rjmp	.+84     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3c0:	f3 2d       	mov	r31, r3
 3c2:	f8 60       	ori	r31, 0x08	; 8
 3c4:	1d c0       	rjmp	.+58     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c6:	37 fc       	sbrc	r3, 7
 3c8:	2d c0       	rjmp	.+90     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3ca:	20 ed       	ldi	r18, 0xD0	; 208
 3cc:	28 0f       	add	r18, r24
 3ce:	2a 30       	cpi	r18, 0x0A	; 10
 3d0:	40 f0       	brcs	.+16     	; 0x3e2 <vfprintf+0xda>
 3d2:	8e 32       	cpi	r24, 0x2E	; 46
 3d4:	b9 f4       	brne	.+46     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d6:	36 fc       	sbrc	r3, 6
 3d8:	75 c1       	rjmp	.+746    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 3da:	23 2d       	mov	r18, r3
 3dc:	20 64       	ori	r18, 0x40	; 64
 3de:	32 2e       	mov	r3, r18
 3e0:	19 c0       	rjmp	.+50     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e2:	36 fe       	sbrs	r3, 6
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <vfprintf+0xea>
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	98 9e       	mul	r9, r24
 3ea:	20 0d       	add	r18, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	92 2e       	mov	r9, r18
 3f0:	11 c0       	rjmp	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f2:	ea e0       	ldi	r30, 0x0A	; 10
 3f4:	2e 9e       	mul	r2, r30
 3f6:	20 0d       	add	r18, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	22 2e       	mov	r2, r18
 3fc:	f3 2d       	mov	r31, r3
 3fe:	f0 62       	ori	r31, 0x20	; 32
 400:	3f 2e       	mov	r3, r31
 402:	08 c0       	rjmp	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	8c 36       	cpi	r24, 0x6C	; 108
 406:	21 f4       	brne	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 408:	83 2d       	mov	r24, r3
 40a:	80 68       	ori	r24, 0x80	; 128
 40c:	38 2e       	mov	r3, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	88 36       	cpi	r24, 0x68	; 104
 412:	41 f4       	brne	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 414:	f7 01       	movw	r30, r14
 416:	93 fd       	sbrc	r25, 3
 418:	85 91       	lpm	r24, Z+
 41a:	93 ff       	sbrs	r25, 3
 41c:	81 91       	ld	r24, Z+
 41e:	7f 01       	movw	r14, r30
 420:	81 11       	cpse	r24, r1
 422:	b3 cf       	rjmp	.-154    	; 0x38a <vfprintf+0x82>
 424:	98 2f       	mov	r25, r24
 426:	9f 7d       	andi	r25, 0xDF	; 223
 428:	95 54       	subi	r25, 0x45	; 69
 42a:	93 30       	cpi	r25, 0x03	; 3
 42c:	28 f4       	brcc	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42e:	0c 5f       	subi	r16, 0xFC	; 252
 430:	1f 4f       	sbci	r17, 0xFF	; 255
 432:	9f e3       	ldi	r25, 0x3F	; 63
 434:	99 83       	std	Y+1, r25	; 0x01
 436:	0d c0       	rjmp	.+26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 438:	83 36       	cpi	r24, 0x63	; 99
 43a:	31 f0       	breq	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43c:	83 37       	cpi	r24, 0x73	; 115
 43e:	71 f0       	breq	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 440:	83 35       	cpi	r24, 0x53	; 83
 442:	09 f0       	breq	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	55 c0       	rjmp	.+170    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 446:	20 c0       	rjmp	.+64     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 448:	f8 01       	movw	r30, r16
 44a:	80 81       	ld	r24, Z
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	0e 5f       	subi	r16, 0xFE	; 254
 450:	1f 4f       	sbci	r17, 0xFF	; 255
 452:	88 24       	eor	r8, r8
 454:	83 94       	inc	r8
 456:	91 2c       	mov	r9, r1
 458:	53 01       	movw	r10, r6
 45a:	12 c0       	rjmp	.+36     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 45c:	28 01       	movw	r4, r16
 45e:	f2 e0       	ldi	r31, 0x02	; 2
 460:	4f 0e       	add	r4, r31
 462:	51 1c       	adc	r5, r1
 464:	f8 01       	movw	r30, r16
 466:	a0 80       	ld	r10, Z
 468:	b1 80       	ldd	r11, Z+1	; 0x01
 46a:	36 fe       	sbrs	r3, 6
 46c:	03 c0       	rjmp	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46e:	69 2d       	mov	r22, r9
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	6f ef       	ldi	r22, 0xFF	; 255
 476:	7f ef       	ldi	r23, 0xFF	; 255
 478:	c5 01       	movw	r24, r10
 47a:	4e d1       	rcall	.+668    	; 0x718 <strnlen>
 47c:	4c 01       	movw	r8, r24
 47e:	82 01       	movw	r16, r4
 480:	f3 2d       	mov	r31, r3
 482:	ff 77       	andi	r31, 0x7F	; 127
 484:	3f 2e       	mov	r3, r31
 486:	15 c0       	rjmp	.+42     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 488:	28 01       	movw	r4, r16
 48a:	22 e0       	ldi	r18, 0x02	; 2
 48c:	42 0e       	add	r4, r18
 48e:	51 1c       	adc	r5, r1
 490:	f8 01       	movw	r30, r16
 492:	a0 80       	ld	r10, Z
 494:	b1 80       	ldd	r11, Z+1	; 0x01
 496:	36 fe       	sbrs	r3, 6
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49a:	69 2d       	mov	r22, r9
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	6f ef       	ldi	r22, 0xFF	; 255
 4a2:	7f ef       	ldi	r23, 0xFF	; 255
 4a4:	c5 01       	movw	r24, r10
 4a6:	2d d1       	rcall	.+602    	; 0x702 <strnlen_P>
 4a8:	4c 01       	movw	r8, r24
 4aa:	f3 2d       	mov	r31, r3
 4ac:	f0 68       	ori	r31, 0x80	; 128
 4ae:	3f 2e       	mov	r3, r31
 4b0:	82 01       	movw	r16, r4
 4b2:	33 fc       	sbrc	r3, 3
 4b4:	19 c0       	rjmp	.+50     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4b6:	82 2d       	mov	r24, r2
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	88 16       	cp	r8, r24
 4bc:	99 06       	cpc	r9, r25
 4be:	a0 f4       	brcc	.+40     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4c0:	b6 01       	movw	r22, r12
 4c2:	80 e2       	ldi	r24, 0x20	; 32
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	33 d1       	rcall	.+614    	; 0x72e <fputc>
 4c8:	2a 94       	dec	r2
 4ca:	f5 cf       	rjmp	.-22     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4cc:	f5 01       	movw	r30, r10
 4ce:	37 fc       	sbrc	r3, 7
 4d0:	85 91       	lpm	r24, Z+
 4d2:	37 fe       	sbrs	r3, 7
 4d4:	81 91       	ld	r24, Z+
 4d6:	5f 01       	movw	r10, r30
 4d8:	b6 01       	movw	r22, r12
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	28 d1       	rcall	.+592    	; 0x72e <fputc>
 4de:	21 10       	cpse	r2, r1
 4e0:	2a 94       	dec	r2
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	82 1a       	sub	r8, r18
 4e6:	91 08       	sbc	r9, r1
 4e8:	81 14       	cp	r8, r1
 4ea:	91 04       	cpc	r9, r1
 4ec:	79 f7       	brne	.-34     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ee:	e1 c0       	rjmp	.+450    	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 4f0:	84 36       	cpi	r24, 0x64	; 100
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f4:	89 36       	cpi	r24, 0x69	; 105
 4f6:	39 f5       	brne	.+78     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 4f8:	f8 01       	movw	r30, r16
 4fa:	37 fe       	sbrs	r3, 7
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 4fe:	60 81       	ld	r22, Z
 500:	71 81       	ldd	r23, Z+1	; 0x01
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	93 81       	ldd	r25, Z+3	; 0x03
 506:	0c 5f       	subi	r16, 0xFC	; 252
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	08 c0       	rjmp	.+16     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 50c:	60 81       	ld	r22, Z
 50e:	71 81       	ldd	r23, Z+1	; 0x01
 510:	07 2e       	mov	r0, r23
 512:	00 0c       	add	r0, r0
 514:	88 0b       	sbc	r24, r24
 516:	99 0b       	sbc	r25, r25
 518:	0e 5f       	subi	r16, 0xFE	; 254
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	f3 2d       	mov	r31, r3
 51e:	ff 76       	andi	r31, 0x6F	; 111
 520:	3f 2e       	mov	r3, r31
 522:	97 ff       	sbrs	r25, 7
 524:	09 c0       	rjmp	.+18     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 526:	90 95       	com	r25
 528:	80 95       	com	r24
 52a:	70 95       	com	r23
 52c:	61 95       	neg	r22
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	f0 68       	ori	r31, 0x80	; 128
 536:	3f 2e       	mov	r3, r31
 538:	2a e0       	ldi	r18, 0x0A	; 10
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	a3 01       	movw	r20, r6
 53e:	33 d1       	rcall	.+614    	; 0x7a6 <__ultoa_invert>
 540:	88 2e       	mov	r8, r24
 542:	86 18       	sub	r8, r6
 544:	44 c0       	rjmp	.+136    	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 546:	85 37       	cpi	r24, 0x75	; 117
 548:	31 f4       	brne	.+12     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 54a:	23 2d       	mov	r18, r3
 54c:	2f 7e       	andi	r18, 0xEF	; 239
 54e:	b2 2e       	mov	r11, r18
 550:	2a e0       	ldi	r18, 0x0A	; 10
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	25 c0       	rjmp	.+74     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 556:	93 2d       	mov	r25, r3
 558:	99 7f       	andi	r25, 0xF9	; 249
 55a:	b9 2e       	mov	r11, r25
 55c:	8f 36       	cpi	r24, 0x6F	; 111
 55e:	c1 f0       	breq	.+48     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 560:	18 f4       	brcc	.+6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 562:	88 35       	cpi	r24, 0x58	; 88
 564:	79 f0       	breq	.+30     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 566:	ae c0       	rjmp	.+348    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 568:	80 37       	cpi	r24, 0x70	; 112
 56a:	19 f0       	breq	.+6      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 56c:	88 37       	cpi	r24, 0x78	; 120
 56e:	21 f0       	breq	.+8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 570:	a9 c0       	rjmp	.+338    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 572:	e9 2f       	mov	r30, r25
 574:	e0 61       	ori	r30, 0x10	; 16
 576:	be 2e       	mov	r11, r30
 578:	b4 fe       	sbrs	r11, 4
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 57c:	fb 2d       	mov	r31, r11
 57e:	f4 60       	ori	r31, 0x04	; 4
 580:	bf 2e       	mov	r11, r31
 582:	09 c0       	rjmp	.+18     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 584:	34 fe       	sbrs	r3, 4
 586:	0a c0       	rjmp	.+20     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 588:	29 2f       	mov	r18, r25
 58a:	26 60       	ori	r18, 0x06	; 6
 58c:	b2 2e       	mov	r11, r18
 58e:	06 c0       	rjmp	.+12     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 590:	28 e0       	ldi	r18, 0x08	; 8
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 596:	20 e1       	ldi	r18, 0x10	; 16
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
 59c:	20 e1       	ldi	r18, 0x10	; 16
 59e:	32 e0       	ldi	r19, 0x02	; 2
 5a0:	f8 01       	movw	r30, r16
 5a2:	b7 fe       	sbrs	r11, 7
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5a6:	60 81       	ld	r22, Z
 5a8:	71 81       	ldd	r23, Z+1	; 0x01
 5aa:	82 81       	ldd	r24, Z+2	; 0x02
 5ac:	93 81       	ldd	r25, Z+3	; 0x03
 5ae:	0c 5f       	subi	r16, 0xFC	; 252
 5b0:	1f 4f       	sbci	r17, 0xFF	; 255
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b4:	60 81       	ld	r22, Z
 5b6:	71 81       	ldd	r23, Z+1	; 0x01
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 5f       	subi	r16, 0xFE	; 254
 5be:	1f 4f       	sbci	r17, 0xFF	; 255
 5c0:	a3 01       	movw	r20, r6
 5c2:	f1 d0       	rcall	.+482    	; 0x7a6 <__ultoa_invert>
 5c4:	88 2e       	mov	r8, r24
 5c6:	86 18       	sub	r8, r6
 5c8:	fb 2d       	mov	r31, r11
 5ca:	ff 77       	andi	r31, 0x7F	; 127
 5cc:	3f 2e       	mov	r3, r31
 5ce:	36 fe       	sbrs	r3, 6
 5d0:	0d c0       	rjmp	.+26     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5d2:	23 2d       	mov	r18, r3
 5d4:	2e 7f       	andi	r18, 0xFE	; 254
 5d6:	a2 2e       	mov	r10, r18
 5d8:	89 14       	cp	r8, r9
 5da:	58 f4       	brcc	.+22     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5dc:	34 fe       	sbrs	r3, 4
 5de:	0b c0       	rjmp	.+22     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5e0:	32 fc       	sbrc	r3, 2
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5e4:	83 2d       	mov	r24, r3
 5e6:	8e 7e       	andi	r24, 0xEE	; 238
 5e8:	a8 2e       	mov	r10, r24
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5ec:	b8 2c       	mov	r11, r8
 5ee:	a3 2c       	mov	r10, r3
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f2:	b8 2c       	mov	r11, r8
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f6:	b9 2c       	mov	r11, r9
 5f8:	a4 fe       	sbrs	r10, 4
 5fa:	0f c0       	rjmp	.+30     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 5fc:	fe 01       	movw	r30, r28
 5fe:	e8 0d       	add	r30, r8
 600:	f1 1d       	adc	r31, r1
 602:	80 81       	ld	r24, Z
 604:	80 33       	cpi	r24, 0x30	; 48
 606:	21 f4       	brne	.+8      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 608:	9a 2d       	mov	r25, r10
 60a:	99 7e       	andi	r25, 0xE9	; 233
 60c:	a9 2e       	mov	r10, r25
 60e:	09 c0       	rjmp	.+18     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 610:	a2 fe       	sbrs	r10, 2
 612:	06 c0       	rjmp	.+12     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 614:	b3 94       	inc	r11
 616:	b3 94       	inc	r11
 618:	04 c0       	rjmp	.+8      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 61a:	8a 2d       	mov	r24, r10
 61c:	86 78       	andi	r24, 0x86	; 134
 61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 620:	b3 94       	inc	r11
 622:	a3 fc       	sbrc	r10, 3
 624:	10 c0       	rjmp	.+32     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 626:	a0 fe       	sbrs	r10, 0
 628:	06 c0       	rjmp	.+12     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 62a:	b2 14       	cp	r11, r2
 62c:	80 f4       	brcc	.+32     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 62e:	28 0c       	add	r2, r8
 630:	92 2c       	mov	r9, r2
 632:	9b 18       	sub	r9, r11
 634:	0d c0       	rjmp	.+26     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 636:	b2 14       	cp	r11, r2
 638:	58 f4       	brcc	.+22     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 63a:	b6 01       	movw	r22, r12
 63c:	80 e2       	ldi	r24, 0x20	; 32
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	76 d0       	rcall	.+236    	; 0x72e <fputc>
 642:	b3 94       	inc	r11
 644:	f8 cf       	rjmp	.-16     	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 646:	b2 14       	cp	r11, r2
 648:	18 f4       	brcc	.+6      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 64a:	2b 18       	sub	r2, r11
 64c:	02 c0       	rjmp	.+4      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 64e:	98 2c       	mov	r9, r8
 650:	21 2c       	mov	r2, r1
 652:	a4 fe       	sbrs	r10, 4
 654:	0f c0       	rjmp	.+30     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 656:	b6 01       	movw	r22, r12
 658:	80 e3       	ldi	r24, 0x30	; 48
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	68 d0       	rcall	.+208    	; 0x72e <fputc>
 65e:	a2 fe       	sbrs	r10, 2
 660:	16 c0       	rjmp	.+44     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 662:	a1 fc       	sbrc	r10, 1
 664:	03 c0       	rjmp	.+6      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 666:	88 e7       	ldi	r24, 0x78	; 120
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 66c:	88 e5       	ldi	r24, 0x58	; 88
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	b6 01       	movw	r22, r12
 672:	0c c0       	rjmp	.+24     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 674:	8a 2d       	mov	r24, r10
 676:	86 78       	andi	r24, 0x86	; 134
 678:	51 f0       	breq	.+20     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 67a:	a1 fe       	sbrs	r10, 1
 67c:	02 c0       	rjmp	.+4      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 67e:	8b e2       	ldi	r24, 0x2B	; 43
 680:	01 c0       	rjmp	.+2      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 682:	80 e2       	ldi	r24, 0x20	; 32
 684:	a7 fc       	sbrc	r10, 7
 686:	8d e2       	ldi	r24, 0x2D	; 45
 688:	b6 01       	movw	r22, r12
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	50 d0       	rcall	.+160    	; 0x72e <fputc>
 68e:	89 14       	cp	r8, r9
 690:	30 f4       	brcc	.+12     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 692:	b6 01       	movw	r22, r12
 694:	80 e3       	ldi	r24, 0x30	; 48
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	4a d0       	rcall	.+148    	; 0x72e <fputc>
 69a:	9a 94       	dec	r9
 69c:	f8 cf       	rjmp	.-16     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 69e:	8a 94       	dec	r8
 6a0:	f3 01       	movw	r30, r6
 6a2:	e8 0d       	add	r30, r8
 6a4:	f1 1d       	adc	r31, r1
 6a6:	80 81       	ld	r24, Z
 6a8:	b6 01       	movw	r22, r12
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	40 d0       	rcall	.+128    	; 0x72e <fputc>
 6ae:	81 10       	cpse	r8, r1
 6b0:	f6 cf       	rjmp	.-20     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 6b2:	22 20       	and	r2, r2
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b6:	4e ce       	rjmp	.-868    	; 0x354 <vfprintf+0x4c>
 6b8:	b6 01       	movw	r22, r12
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	37 d0       	rcall	.+110    	; 0x72e <fputc>
 6c0:	2a 94       	dec	r2
 6c2:	f7 cf       	rjmp	.-18     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6c4:	f6 01       	movw	r30, r12
 6c6:	86 81       	ldd	r24, Z+6	; 0x06
 6c8:	97 81       	ldd	r25, Z+7	; 0x07
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	9f ef       	ldi	r25, 0xFF	; 255
 6d0:	2b 96       	adiw	r28, 0x0b	; 11
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	df 90       	pop	r13
 6ea:	cf 90       	pop	r12
 6ec:	bf 90       	pop	r11
 6ee:	af 90       	pop	r10
 6f0:	9f 90       	pop	r9
 6f2:	8f 90       	pop	r8
 6f4:	7f 90       	pop	r7
 6f6:	6f 90       	pop	r6
 6f8:	5f 90       	pop	r5
 6fa:	4f 90       	pop	r4
 6fc:	3f 90       	pop	r3
 6fe:	2f 90       	pop	r2
 700:	08 95       	ret

00000702 <strnlen_P>:
 702:	fc 01       	movw	r30, r24
 704:	05 90       	lpm	r0, Z+
 706:	61 50       	subi	r22, 0x01	; 1
 708:	70 40       	sbci	r23, 0x00	; 0
 70a:	01 10       	cpse	r0, r1
 70c:	d8 f7       	brcc	.-10     	; 0x704 <strnlen_P+0x2>
 70e:	80 95       	com	r24
 710:	90 95       	com	r25
 712:	8e 0f       	add	r24, r30
 714:	9f 1f       	adc	r25, r31
 716:	08 95       	ret

00000718 <strnlen>:
 718:	fc 01       	movw	r30, r24
 71a:	61 50       	subi	r22, 0x01	; 1
 71c:	70 40       	sbci	r23, 0x00	; 0
 71e:	01 90       	ld	r0, Z+
 720:	01 10       	cpse	r0, r1
 722:	d8 f7       	brcc	.-10     	; 0x71a <strnlen+0x2>
 724:	80 95       	com	r24
 726:	90 95       	com	r25
 728:	8e 0f       	add	r24, r30
 72a:	9f 1f       	adc	r25, r31
 72c:	08 95       	ret

0000072e <fputc>:
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	fb 01       	movw	r30, r22
 738:	23 81       	ldd	r18, Z+3	; 0x03
 73a:	21 fd       	sbrc	r18, 1
 73c:	03 c0       	rjmp	.+6      	; 0x744 <fputc+0x16>
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	9f ef       	ldi	r25, 0xFF	; 255
 742:	2c c0       	rjmp	.+88     	; 0x79c <fputc+0x6e>
 744:	22 ff       	sbrs	r18, 2
 746:	16 c0       	rjmp	.+44     	; 0x774 <fputc+0x46>
 748:	46 81       	ldd	r20, Z+6	; 0x06
 74a:	57 81       	ldd	r21, Z+7	; 0x07
 74c:	24 81       	ldd	r18, Z+4	; 0x04
 74e:	35 81       	ldd	r19, Z+5	; 0x05
 750:	42 17       	cp	r20, r18
 752:	53 07       	cpc	r21, r19
 754:	44 f4       	brge	.+16     	; 0x766 <fputc+0x38>
 756:	a0 81       	ld	r26, Z
 758:	b1 81       	ldd	r27, Z+1	; 0x01
 75a:	9d 01       	movw	r18, r26
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	31 83       	std	Z+1, r19	; 0x01
 762:	20 83       	st	Z, r18
 764:	8c 93       	st	X, r24
 766:	26 81       	ldd	r18, Z+6	; 0x06
 768:	37 81       	ldd	r19, Z+7	; 0x07
 76a:	2f 5f       	subi	r18, 0xFF	; 255
 76c:	3f 4f       	sbci	r19, 0xFF	; 255
 76e:	37 83       	std	Z+7, r19	; 0x07
 770:	26 83       	std	Z+6, r18	; 0x06
 772:	14 c0       	rjmp	.+40     	; 0x79c <fputc+0x6e>
 774:	8b 01       	movw	r16, r22
 776:	ec 01       	movw	r28, r24
 778:	fb 01       	movw	r30, r22
 77a:	00 84       	ldd	r0, Z+8	; 0x08
 77c:	f1 85       	ldd	r31, Z+9	; 0x09
 77e:	e0 2d       	mov	r30, r0
 780:	09 95       	icall
 782:	89 2b       	or	r24, r25
 784:	e1 f6       	brne	.-72     	; 0x73e <fputc+0x10>
 786:	d8 01       	movw	r26, r16
 788:	16 96       	adiw	r26, 0x06	; 6
 78a:	8d 91       	ld	r24, X+
 78c:	9c 91       	ld	r25, X
 78e:	17 97       	sbiw	r26, 0x07	; 7
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	17 96       	adiw	r26, 0x07	; 7
 794:	9c 93       	st	X, r25
 796:	8e 93       	st	-X, r24
 798:	16 97       	sbiw	r26, 0x06	; 6
 79a:	ce 01       	movw	r24, r28
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	1f 91       	pop	r17
 7a2:	0f 91       	pop	r16
 7a4:	08 95       	ret

000007a6 <__ultoa_invert>:
 7a6:	fa 01       	movw	r30, r20
 7a8:	aa 27       	eor	r26, r26
 7aa:	28 30       	cpi	r18, 0x08	; 8
 7ac:	51 f1       	breq	.+84     	; 0x802 <__ultoa_invert+0x5c>
 7ae:	20 31       	cpi	r18, 0x10	; 16
 7b0:	81 f1       	breq	.+96     	; 0x812 <__ultoa_invert+0x6c>
 7b2:	e8 94       	clt
 7b4:	6f 93       	push	r22
 7b6:	6e 7f       	andi	r22, 0xFE	; 254
 7b8:	6e 5f       	subi	r22, 0xFE	; 254
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	af 4f       	sbci	r26, 0xFF	; 255
 7c2:	b1 e0       	ldi	r27, 0x01	; 1
 7c4:	3e d0       	rcall	.+124    	; 0x842 <__ultoa_invert+0x9c>
 7c6:	b4 e0       	ldi	r27, 0x04	; 4
 7c8:	3c d0       	rcall	.+120    	; 0x842 <__ultoa_invert+0x9c>
 7ca:	67 0f       	add	r22, r23
 7cc:	78 1f       	adc	r23, r24
 7ce:	89 1f       	adc	r24, r25
 7d0:	9a 1f       	adc	r25, r26
 7d2:	a1 1d       	adc	r26, r1
 7d4:	68 0f       	add	r22, r24
 7d6:	79 1f       	adc	r23, r25
 7d8:	8a 1f       	adc	r24, r26
 7da:	91 1d       	adc	r25, r1
 7dc:	a1 1d       	adc	r26, r1
 7de:	6a 0f       	add	r22, r26
 7e0:	71 1d       	adc	r23, r1
 7e2:	81 1d       	adc	r24, r1
 7e4:	91 1d       	adc	r25, r1
 7e6:	a1 1d       	adc	r26, r1
 7e8:	20 d0       	rcall	.+64     	; 0x82a <__ultoa_invert+0x84>
 7ea:	09 f4       	brne	.+2      	; 0x7ee <__ultoa_invert+0x48>
 7ec:	68 94       	set
 7ee:	3f 91       	pop	r19
 7f0:	2a e0       	ldi	r18, 0x0A	; 10
 7f2:	26 9f       	mul	r18, r22
 7f4:	11 24       	eor	r1, r1
 7f6:	30 19       	sub	r19, r0
 7f8:	30 5d       	subi	r19, 0xD0	; 208
 7fa:	31 93       	st	Z+, r19
 7fc:	de f6       	brtc	.-74     	; 0x7b4 <__ultoa_invert+0xe>
 7fe:	cf 01       	movw	r24, r30
 800:	08 95       	ret
 802:	46 2f       	mov	r20, r22
 804:	47 70       	andi	r20, 0x07	; 7
 806:	40 5d       	subi	r20, 0xD0	; 208
 808:	41 93       	st	Z+, r20
 80a:	b3 e0       	ldi	r27, 0x03	; 3
 80c:	0f d0       	rcall	.+30     	; 0x82c <__ultoa_invert+0x86>
 80e:	c9 f7       	brne	.-14     	; 0x802 <__ultoa_invert+0x5c>
 810:	f6 cf       	rjmp	.-20     	; 0x7fe <__ultoa_invert+0x58>
 812:	46 2f       	mov	r20, r22
 814:	4f 70       	andi	r20, 0x0F	; 15
 816:	40 5d       	subi	r20, 0xD0	; 208
 818:	4a 33       	cpi	r20, 0x3A	; 58
 81a:	18 f0       	brcs	.+6      	; 0x822 <__ultoa_invert+0x7c>
 81c:	49 5d       	subi	r20, 0xD9	; 217
 81e:	31 fd       	sbrc	r19, 1
 820:	40 52       	subi	r20, 0x20	; 32
 822:	41 93       	st	Z+, r20
 824:	02 d0       	rcall	.+4      	; 0x82a <__ultoa_invert+0x84>
 826:	a9 f7       	brne	.-22     	; 0x812 <__ultoa_invert+0x6c>
 828:	ea cf       	rjmp	.-44     	; 0x7fe <__ultoa_invert+0x58>
 82a:	b4 e0       	ldi	r27, 0x04	; 4
 82c:	a6 95       	lsr	r26
 82e:	97 95       	ror	r25
 830:	87 95       	ror	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	ba 95       	dec	r27
 838:	c9 f7       	brne	.-14     	; 0x82c <__ultoa_invert+0x86>
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	61 05       	cpc	r22, r1
 83e:	71 05       	cpc	r23, r1
 840:	08 95       	ret
 842:	9b 01       	movw	r18, r22
 844:	ac 01       	movw	r20, r24
 846:	0a 2e       	mov	r0, r26
 848:	06 94       	lsr	r0
 84a:	57 95       	ror	r21
 84c:	47 95       	ror	r20
 84e:	37 95       	ror	r19
 850:	27 95       	ror	r18
 852:	ba 95       	dec	r27
 854:	c9 f7       	brne	.-14     	; 0x848 <__ultoa_invert+0xa2>
 856:	62 0f       	add	r22, r18
 858:	73 1f       	adc	r23, r19
 85a:	84 1f       	adc	r24, r20
 85c:	95 1f       	adc	r25, r21
 85e:	a0 1d       	adc	r26, r0
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
